import pathlib as p
import shutil
import subprocess

import at_control.definitions as defs
import at_control.loader as loader


def deploy(path: p.Path) -> None:
    project = loader.load_project(path)

    gen_path = __generate_source_dir(path, project)

    for task in project.tasks.values():
        __deploy_task(gen_path, task)
        pass


def __deploy_task(gen_path: p.Path, task: defs.TaskDef) -> None:
    print(f'deploying: {task.name}')
    subprocess.run([
        'gcloud',
        'functions',
        'deploy',
        task.name,
        '--runtime', 'python37',
        '--memory', '128MB',
        '--retry',
        '--source', str(gen_path),
        '--entry-point', f'execute_{task.name}',
        '--trigger-topic', task.topic,
        '--timeout', f'{task.timeout}s',
    ])


def __generate_source_dir(path: p.Path, project: defs.ProjectDef) -> p.Path:
    generated = p.Path(f'{path}.generated')
    if generated.exists():
        shutil.rmtree(generated)

    ignore_fn = shutil.ignore_patterns('.*', '*.pyc', '__pycache__')

    shutil.copytree(path, generated, ignore=ignore_fn)

    shutil.copytree(p.Path('at_runner'), generated.joinpath('at_runner'),
                    ignore=ignore_fn)

    main_path = generated.joinpath('main.py')
    main_path.touch()
    with main_path.open(mode='w') as file:
        file.write(__main_content(project))

    requirements_path = generated.joinpath('requirements.txt')
    requirements_path.touch()
    with requirements_path.open(mode='w') as file:
        file.write(__requirements_content())

    return generated


def __main_content(project: defs.ProjectDef) -> str:
    source = """# autogenerated: do not modify
import at_runner.storage as storage


store = storage.Storage('postgres')
store.setup()
task = None
"""

    for task in project.tasks.values():
        source += """

import {name}


def execute_{name}(event, context):
    if not task:
        task = {name}.TaskClass(store, '{name}', {timeout})
    task.lock_and_run(event, context)
""".format(**{'name': task.name,
              'timeout': task.timeout})

    return source


def __requirements_content() -> str:
    return """# autogenerated: do not modify
marshmallow
mypy
psycopg2
"""


if __name__ == '__main__':
    deploy(p.Path('example'))
